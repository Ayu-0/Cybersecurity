# OSI AND TCP/IP MODELS -

Basically it's a internet protocol suite, it's a framework that organizes the protocols used for communication on the internet. You can say it's a main protocol.

OSI : Open source interconneted models ( conceptual framework )
TCP/IP : Foundation of Internet communications and is more practical compared to the OSI model

OSI model Layers : 
1. Application - Provides an interface for the end-user
2. Presentation - Transaltes data from computer code into network-formatted code
3. Session - Establishes request/response interaction between two network hosts
4. Transport - Manager traffic flow through the network layer
5. Network  - Determines what path data packets will be taking to get from one network to another
6. Data Link- Breaks data into frames that will be transmitted over a physical layer
7. Physical - Converts digital data into optical, electrical or radio signals


TCP/IP Model Layers :
1. Application
2. Transport
3. Network
4. Data-Link
5. Physical



1. Application layer : 

 It acts as the bridge between a user's application and the network layer, allowing them to interact with each other by providing the necessary protocols and services for communication across a network.

Network Services - Network service is an application running at the application layer and above, that provides data storage, manipulation, presentation, communication or other capability which is often implemented using a client–server or peer-to-peer architecture 

Client-Server Architecture - In client-server architecture, client requests service and server provides that service

Peer-to-peer - In which each device acts as both, as a server and a client.


## Internet Protocols : 
A set of rules that allows computers and other devices to communicate over Internet.


$ Working of Internet Protocol :
Dividing Data into Packets: When you send information over the internet, IP splits it into small parts called packets. Each packet contains a piece of the data and the address of where it needs to go.

Addressing: Every device connected to the internet has its own IP address. This address helps identify where the data is being sent from and where it should be delivered.

Routing the Packets: As the packets travel across the internet, they pass through several devices called routers. These routers help direct the packets toward the correct destination, like how mail is sorted at different post offices.

Reassemble the Data: Once all the packets arrive at the destination, they are put back together to recreate the original message or file.

Handling Missing Packets: If some packets don’t arrive, the system can request that they be sent again, making sure the complete data is received.


$ Why we need protocols ?
Protocols help make sure that data moves smoothly and securely between devices on a network. Since sender and receiver devices operate at different speeds and locations, protocols help regulate transmission rates to prevent data loss, prevents collisions and data corruptions.



## How application layer talks to each other ?

- A user interacts with an application (e.g., opening a web browser to visit a website).
- The application prepares the data to send (e.g., an HTTP request for a webpage).
- The application uses a specific Application Layer Protocol (e.g., HTTP for web browsing).
- It structures the message according to the protocol’s rules.
- The application hands off data to the next layer (Transport Layer) via (TCP or UDP).


## Sockets :

Socket - It's a two way end-point communication between application layer process and transport layer. Sockets act like a pipe between the application layer and the transport layer, It's fucntion is to connects both layers.

 - Applications (like web browsers, games, or chat apps) don’t directly talk to the network, they talk to the transport layer through sockets.
 - It enables multiple applications to share the same network.
 - It allows the transport layer (TCP/UDP) to work independently.
 - Sockets identified by combination of the followings : (Source IP, Source Port, Destination IP,     Destination Port, Protocol) eg, - If your computer (192.168.1.10) connects to example.com (93.184.216.34), the socket looks like this: (192.168.1.10:50000 → 93.184.216.34:443, TCP)
- Sockets assigned whenever clients connect to the server, it exchange information and then disconnect.
- No. of Sockets varies according to your no. of ports, OS limits, protocol types, system resources etc..


## Ports : 

 - In simple terms It allow computers to easily differentiate between different kinds of traffic.
 - IP addresses identify devices on a network, while port numbers pinpoint specific services or applications running on those devices, like If your home adderess is your IP address then the room in your house is like port numbers, each and every room have different use case, Isn't
 - Port numbers are 16-bit numerical identifiers (ranging from 0 to 65535) that serves as a logical endpoint for specific types of network communications
- Ports allow a single computer with one IP address to run multiple network services simultaneously. Each service "listens" on a specific port number.
- Ports enable multiple connections to exist simultaneously between the same two computers. Eg, you might have several browser tabs open connecting to the same web server, but each connection uses different port numbers on your computer.

Ports are categorized into three ranges:

Port-Range	      Port-Numbers	 Usage
Reserved Ports  	0 - 1023	     Reserved for standard services (HTTP, FTP, SSH, DNS)
Registered Ports	1024 - 49151	 Used by software vendors (e.g., games, databases, proprietary services)
Private Ports   	49152 - 65535	 Temporary ports assigned by the OS for client connections

- Port 0 is a wildcard port that tells the system to find a suitable port number. Unlike most port numbers, port 0 is a reserved port in TCP/IP networking, meaning that it should not be used in TCP or UDP messages
 
 
### Ephermal Ports - 
In general, ephemeral ports are in the range of 1024 to 65535. It's just temporary ports used by client application and are used only for the duration of the connection. 

I.) When multiple connections of the same protocol type (like multiple HTTP connections) are established, each connection uses the same protocol (HTTP) and connects to the same server port (80), but your operating system assigns different ephemeral ports (54001, 54002, 54003) to each connection. understand like this, 
When your computer (client) wants to make multiple connections to that server:

Connection 1: Your OS assigns port 54001 → connects directly to server port 80
Connection 2: Your OS assigns port 54002 → connects directly to server port 80

II.) When a client initiates a connection to a server, the server's operating system checks the protocol requested by the client (e.g., HTTP, FTP, SSH, etc.) and matches it with the reserved port number (e.g., 80 for HTTP, 21 for FTP, etc.). If there's a match, the server's operating system uses the reserved port as the "main door" or the "well-known port" for the connection.

III.) When a connection is established between your computer and a web server, the two ports (server port and ephermal port) form what's called a "socket pair" or "connection tuple" that uniquely identifies the connection. This connection tuple consists of 4 pieces of information:

Source IP address (your computer)
Source port (your ephemeral port, e.g., 54001)
Destination IP address (the server)
Destination port (port 80 on the server)

IV.) when an application creates a socket, it specifies the protocol (for example, HTTP, HTTPS) via the socket API. This protocol choice is stored in the socket's settings, so when an ephemeral port is assigned as the local endpoint of the connection, it's already tied to a socket that uses a specific protocol.


### Port forwarding :
Port forwarding is a technique to make private network devices accessible over the internet.

- When a request comes in on a specific port of your router’s public IP, port forwarding tells the router, Send this traffic to the device at this private IP address on the same (or a different) port. 
In simply, If someone from the internet tries to connect to me on a specific port, send them to this specific device on my private network

- By default, routers do not allow unsolicited incoming traffic from the internet for security reasons.
Port forwarding creates a rule to direct incoming traffic on specific ports to a device on your private network.

- When a request is made to your public IP on the specified port, the router forwards it to the designated private IP and port. This allows external access to services running on your private network.

- To use port forwarding assign a static IP to the device on your local network to ensure the port forwarding rule works consistently. Dynamic IP breaks the forwarding rule, cause each time it's changed.


### Common protocols used in application layer -
eg;  HTTP, DHCP, FTP, SMTP, POP3, SSH, VNC, TFTP, IMAP, WebSocket etc... 

 I. HTTP (Hypertext transfer protocol) :

 - It's a client-server protocol and it tells us how you request this data from the server and also tells us how the server will send back data to the client.
 - When client is to make request to the server, it's HTTP request, and when server send response back to the client, it's known as HTTP response
 - HTPP uses TCP protocol, since we don't have to loose data over connections, it first ensure connection to the both ends, then transfer the data
 - It's stateless in nature means the server does not retain any session information between requests, means everytime you visit the website, it'll detect as a new user, But when you visit any website over and over again, it's not like that, it'll not treat you as a new user every time, it'll detect you visiting again,how? It uses something called Cookies. So, cookies is a unique string stored on client browser that saves your browsing activity. 


i.) HTTP METHODS :
It's a set of request methods that specify actions to perform on a resource.

GET: Retrieve data from the server.
POST: Send data to the server (e.g., form submissions).
PUT: Update existing data on the server.
OPTIONS: Used to request information about the communication options available(like GET, POST, PUT, etc.) for a target resource.
DELETE: Remove data from the server, etc...
 
ii.) HTTPS Status Codes :
It's a three-digit code that a web server sends to a client's browser to indicate the status of a request

2xx OK: The request was successful.
3xx Redirection: further action is required to complete the request, often a redirect to a different URL
4xx Not Found: Request cannot be fulfilled due to a problem with the client's request
5xx Internal Server Error: The server encountered an error while processing the request

iii.) Headers and Body :
HTTP messages are divided into two parts:
Headers: Contain metadata about the request or response (content type, length, caching policies, etc..)
Body: Contains the actual data (HTML, JSON, images, etc.) being transmitted. 

HTTPS : It's a HTTP with an added security layer. HTTPS encrypts the data using Transport Layer Security (TLS) to ensure that the communication is secure, private, and tamper-proof.


II. SMTP (simple mail transfer protocol) :

- It's a protocol used to send mail between mail servers, it operates at application layer. 
- It's a connection oriented protocol and uses TCP. Typically operates on port 25 (unencrypted), 587 (with TLS/STARTTLS)
- How it works - 
 When you click “send”, your email client opens a TCP connection with an SMTP server.
 The client and server exchange commands (e.g., EHLO/HELO, MAIL FROM, RCPT TO) to verify identities and set up the transmission.     The email content is sent as a series of text commands, the server responds with status codes (like 250 OK or 354 Start Input).
 The SMTP server then uses DNS (MX records) to determine the next hop and transfers the email along the delivery chain.

- SMTP operates in Store-and-Forward Method: Each server receives the complete message, stores it temporarily, then forwards it to the next server until it reaches the recipient mail server.
- SMTP doesn't have size limits, many mail servers impose restrictions to manage bandwidth.

- Understand with example, Let's say you want to send mail via gmail to outlook :
You compose an email in your client (gmail).
Your email client connects to your email provider's SMTP server(connects to Google's SMTP server).
The SMTP server accepts your email and looks at the recipient's address to determine where to send it. This involves checking the domain part of the email address (the part after @) through the DNS system.
DNS provides MX (Mail Exchange) records that tell your provider's SMTP server which mail servers are responsible for accepting mail for the recipient's domain.
Your provider's SMTP server connects to the recipient's mail server (Outlook.com address) and transfers the email using the SMTP protocol.
The recipient's mail server receives the email and stores it in the recipient's mailbox on their server.

- When you check your email via a browser or an email client, the application connects to the mail server using a receiving protocol (typically POP3 or IMAP)
- The server then sends the stored messages to the client, where they’re rendered for you to read. This process doesn’t involve any special “conversion” between protocols, it’s simply the retrieval of email data from the server to your application.


III. DNS  (Domain name system) :

- You can say it's a phonbook of Internet. By go with technical definition it just translate human readble domain names to IP addr. that computers can understand.

- How does it works?
Ok, so when you type google.com in browser, the system checks the local DNS cache first.
If the IP is found in the cache, the browser uses it. If not, it sends a DNS query to a recursive resolver (usually provided by the ISP or a public DNS service like Google’s 8.8.8.8 or Cloudflare’s 1.1.1.1). If the resolver has a cached record, it returns the IP address.

If not, it queries the root DNS servers.
The resolver asks the root servers (.) where to find example.com.
The root server doesn’t have the answer but directs the resolver to the appropriate TLD (Top-Level Domain) name server, 
such as .com servers for example.com.

The resolver queries the TLD name server (e.g., .com name servers or .org).
The TLD server provides the address of the authoritative name server for example.com.

The resolver queries the authoritative server, which holds the DNS records for example.com.
The server responds with the A record (IPv4) or AAAA record (IPv6), providing the IP address of www.example.com.
Resolver Caches and Returns the IP

The resolver caches the response for future requests.
It sends the IP address back to the user’s device.
User’s Device Connects to the Server and establishes a connection to the IP address and loads the website.

* Domain Name Hierarchy :

Level	               Example	                   Description
Root	               .	                       The invisible root domain
TLD	                   .uk	                       Country-code TLD (ccTLD)
Second-Level Domain    co.uk	                   Used for commercial entities in the UK
Third-Level Domain	   example.co.uk	           The registered domain
Fourth-Level Domain	   sales.example.co.uk	       A subdomain under example.co.uk

a) Root Domain (.)
The highest level of the DNS hierarchy.
Represented by an implicit dot (.) at the end of a domain name, but usually omitted.
Root-level domains are managed by the Internet Corporation for Assigned Names and Numbers (ICANN), which is responsible for coordinating the global domain name system. ICANN has delegated the management of TLDs to various organizations, known as domain name registries, which are responsible for managing the registration of domain names within their respective TLDs

b) Top-Level Domain (TLD)
The rightmost part of a domain (e.g., .com, .org, .net).
Types of TLDs:
gTLDs (Generic TLDs): .com, .net, .org, .info
ccTLDs (Country-Code TLDs): .us, .uk, .in, .jp
sTLDs (Sponsored TLDs): .gov, .edu, .mil
✅ Example: In example.com, .com is the TLD.

c) Second-Level Domain (SLD)
The name directly to the left of the TLD.
Typically, this is the main domain name registered by a user or business.
Example: In example.com, example is the second-level domain.
✅ SLDs are unique within a TLD.
For example -
google.com
google.org
google.net
Each is a different domain, even though "google" is the SLD.

d) Third-Level Domain (Subdomain)
Any domain name to the left of the second-level domain.
Subdomains are part of the main domain but can point to different services.
Example:
www.example.com → www is a third-level domain (subdomain of example.com).
mail.example.com → mail is another subdomain.

/* Sometimes switching to diff DNS have better ping in games and also you can acess sites that is blocked. How?
- Some dns responds faster than others
- Provides optimized routing, that reduces no. of hops
- There maybe also problem on device, on network traffic managements that slows you down
and for some DNS block access to some sites while others allow it or some have outdated dns server cache records




2. Transport Layer :

- It ensures that data sent from one computer reaches the correct application on another computer reliably or quickly (TCP or UDP)
- From one network to another network, data transferred by network Layer, the actual transportation from one computer to another but  within the computer transportation of data from network to application is done by transport layer. eg, Let say you're sending whatsapp msg to friend, okay so the message is deliever over to your computer by network layer, but when the message reaches your computer, it had no idea what to do and where to send with the data, so transport layer do its job from here, transport layer send your data to correct application where your whatsapp mssg will be recieved.
- It just recieves or send data to network layer (using port numbers)
- In the transport layer, data transmission is identified using sockets, which consist of an IP address and port number. Each application creates a socket when sending data from the application layer to the transport layer, a process called multiplexing. On the receiving end, data moves from the network layer to the transport layer, which checks the socket information and directs it to the appropriate application, known as demultiplexing.
- Sockets have unique  identifiers, and that each segment have special fields that indicate the socket to which the segment is to be delivered. These special fields, are the source port number field and the destination port number field


### Why Do We Need the Transport Layer?
Imagine you are using your laptop connected to the internet, and you open multiple applications:

YouTube (streaming video)
WhatsApp (chat messaging)
Google Chrome (web browsing)
All these applications need to send and receive data at the same time. But how does your computer know which data belongs to which application?

The Transport Layer solves this problem by:
✔ Identifying different applications using port numbers.
✔ Splitting large data into smaller chunks (segmentation) for transmission.
✔ Ensuring data arrives correctly and in order (in TCP-based applications).

### How the Transport Layer Works ?

A. Process-to-Process Communication (Using Ports)
Each running application has a unique port number to distinguish it from others.

Application	    Protocol	Default Port
Web (HTTP)	    TCP	         80
Email (SMTP)	TCP	         25
FTP	            TCP	         21
Streaming   	UDP	Dynamic (e.g, 5004)
Online Gaming	UDP	Dynamic (e.g, 27015)

For example, if you watch a YouTube video while sending an email, the transport layer ensures:
Video packets go to YouTube's video player (UDP, Port 5004).
Email packets go to Gmail’s mail server (SMTP, Port 25).
This prevents your video stream from mixing with your email.

B. Segmentation and Reassembly
Large files, such as videos or documents, cannot be sent as a single unit. The Transport Layer splits them into smaller segments before transmission.

Example: Sending a 10 MB file via TCP
📌 Segmentation: The file is broken into smaller 1 KB chunks (segments).
📌 Transmission: Each chunk is sent with a sequence number to ensure correct order.
📌 Reassembly: The receiver recombines the chunks in the correct order.

What if a chunk is lost?
✔ TCP detects the missing segment and requests a retransmission.
✔ UDP does NOT retransmit missing segments (useful for live streaming, where lost packets don’t matter much).


### Main Protocols of the Transport Layer
The transport layer primarily uses two protocols:

TCP (Transmission Control Protocol) → Reliable, ordered delivery.
UDP (User Datagram Protocol) → Fast but unreliable delivery.
Feature	                TCP	                                                           UDP
Connection-type	        Connection-Oriented	                                           Connectionless
Reliability	            Ensures all packets arrive in order	                           No guarantee of delivery
Flow Control	        Prevents sender from overwhelming receiver	                   No flow control
Congestion Control	    Avoids overloading the network	                               No congestion control
Speed	                Slower due to reliability checks	                           Faster, used in real-time applications
Examples            	(HTTP, HTTPS),(SMTP), (FTP)	                                   Online gaming,streaming, VoIP calls

A. TCP (Transmission Control Protocol) - Reliable Delivery
TCP is used when reliability is important, like sending emails, loading web pages, or downloading files.

TCP in Action:
i). Connection Establishment (Three-Way Handshake)
Before sending data, TCP establishes a connection:

1️⃣ Client (Sender) sends SYN (Synchronize)

"Hey, I want to talk!"
2️⃣ Server replies with SYN-ACK (Synchronize + Acknowledge)
"Okay, I'm ready. Let’s start!"
3️⃣ Client sends ACK (Acknowledge)
"Great, let’s go!"
Now, the connection is established, and data can be transferred.

ii). Reliable Data Transmission
TCP ensures all packets arrive correctly:
✔ If a packet is lost, the receiver asks for retransmission.
✔ Packets are reassembled in the correct order using sequence numbers.

Example: Downloading a file via FTP (TCP)

Your computer requests a file (TCP SYN).
The server starts sending the file in small chunks (segments).
Each chunk is acknowledged (ACK) before the next is sent.
If a chunk is lost, it is retransmitted.
iii). Connection Termination (Four-Way Handshake)
Once data transfer is complete, TCP gracefully closes the connection:

1️⃣ Client sends FIN (Finish) → "I’m done sending."
2️⃣ Server replies with ACK → "Okay, noted."
3️⃣ Server sends FIN → "I’m done too."
4️⃣ Client replies with ACK → "Goodbye!"

B. UDP (User Datagram Protocol) - Fast but Unreliable
UDP is used when speed is more important than accuracy, like video streaming, VoIP calls, and online gaming.

✔ No connection setup (No handshake) → Just sends data immediately.
✔ No error checking → If a packet is lost, it is ignored.

Example: Online Gaming (Call of Duty, FIFA, etc.)

UDP sends game movements instantly.
If a packet is lost, it’s ignored (the game keeps going).
TCP would be too slow because retransmissions would cause lag.